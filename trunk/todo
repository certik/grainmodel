- create a better interface to libmesh - i.e. the System.integ should have
a better interface

- eventually get rid of the src dir

- consider adding the femlib to femgeom, but later.

- create assemble matrices code for each problem.




- create a specialized gradint C++ function, that will compute the gradient
  only at elements, which concern us and also immediately integrates it over
  the element faces. This should make it much faster than it is now.

- possibly try to use libmesh node numbering, if it makes things faster

- write a mockup C++ function, that will loop over "elements" but will do
  nothing, just call the python progressbar code. If it slow, implement
  Updater->update to check if the percentage changed and if so, than call
  update_python. In python rename the method name from update to update_python

- try to create the numpy array from the file in C++, this could make it quite
  a lot faster

- if it's not enough, do the whole assembly in C++. It's a black box anyway.
  But still I would prefer python.

- it seems the boundary integration is quite slow compared to the gradient.
  Isn't it caused by the boundary elements finding? If so, try to fix it.

- implement adaptive mesh refinement, tetgen should be able to do that. 

- try quadratic elements, this should make it a lot more precise.
